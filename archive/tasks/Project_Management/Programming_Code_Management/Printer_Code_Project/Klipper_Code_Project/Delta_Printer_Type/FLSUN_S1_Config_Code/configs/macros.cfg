######################################################################
# Combined  Start Pack v1.1
# - Stage-1: Mesh profile + hydration control (profile-safe, no 'default')
# - Stage-2: Probe guard, capture, offset suggest/apply (delta-safe)
# - Launcher: PRINT_LAUNCHER + START_PRINT_SEQUENCE_GOV + END_PRINT_GOV
# - First-layer stability: slowdown + fan hold, with release macro
# Policy: RESPOND MSG only (no semicolons), parser-safe Jinja, save_variables for flags
######################################################################

# ======================
# Stage-1 - Mesh Control
# ======================

[gcode_macro GOV_SET_MESH_PROFILE_CODE]
description: "Set numeric code for mesh profile name (1=governance, 2=cal1, 3=prod1)"
variable_code: 1
gcode:
    {% set code = params.CODE|default(1)|int %}
    SET_GCODE_VARIABLE MACRO=GOV_SET_MESH_PROFILE_CODE VARIABLE=code VALUE={code}
    SAVE_VARIABLE VARIABLE=gov_mesh_profile_code VALUE={code}
    RESPOND MSG="GOV: mesh_profile_code set to {code}"
    
[gcode_macro GOV_MESH_SAVE_CURRENT]
description: "Save current mesh to mapped profile and set hydration flag (deferred persist)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}

    RESPOND MSG="GOV: saving current mesh to {profile}"
    BED_MESH_PROFILE SAVE={profile}

    # Persist for hydration / startup load (string â†’ nested quotes)
    SAVE_VARIABLE VARIABLE=gov_last_mesh_profile VALUE={profile}

    # Mark hydration flag
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    RESPOND MSG="GOV: hydration_flag set to 1 (persist on RESTART or SAVE_CONFIG)"

    RESPOND MSG="GOV: hydration_flag set to 1 (persist on RESTART or SAVE_CONFIG)"
    
[gcode_macro GOV_MESH_FLAGS_READ]
description: "Read back mesh profile code and hydration flag"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(0)|int %}
    {% set flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
    RESPOND MSG="GOV: mesh_profile_code={code}"
    RESPOND MSG="GOV: hydration_flag={flag}"
    
[gcode_macro GOV_MESH_SAVE_AND_COMMIT]
description: "Save mesh to mapped profile and persist via SAVE_CONFIG (restarts)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: saving mesh to {profile} and committing to disk"
    BED_MESH_PROFILE SAVE={profile}
    SAVE_VARIABLE VARIABLE=gov_default_mesh VALUE=1
    SAVE_CONFIG
    
[gcode_macro GOV_HYDRATE_NOW]
description: "Load mapped mesh profile immediately (in-session)"
gcode:
    {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
    {% if code == 1 %}
        {% set profile = "governance" %}
    {% elif code == 2 %}
        {% set profile = "cal1" %}
    {% elif code == 3 %}
        {% set profile = "prod1" %}
    {% else %}
        {% set profile = "governance" %}
    {% endif %}
    RESPOND MSG="GOV: in-session hydration requested for {profile}"
    G4 P1000
    BED_MESH_PROFILE LOAD={profile}
    RESPOND MSG="GOV: in-session hydration complete for {profile}"
    
[delayed_gcode GOV_STARTUP_HYDRATE]
initial_duration: 2.0
gcode:
    RESPOND MSG="GOV: Startup hydration begin (MID=0)"
    {% if printer.configfile.settings.bed_mesh is defined %}
        {% set has_flag = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
        {% set code = printer.save_variables.variables.gov_mesh_profile_code|default(1)|int %}
        {% if code == 1 %}
            {% set profile = "governance" %}
        {% elif code == 2 %}
            {% set profile = "cal1" %}
        {% elif code == 3 %}
            {% set profile = "prod1" %}
        {% else %}
            {% set profile = "governance" %}
        {% endif %}
        {% if has_flag == 1 %}
            RESPOND MSG="GOV: bed_mesh detected - loading profile {profile}"
            G4 P2000
            BED_MESH_PROFILE LOAD={profile}
            RESPOND MSG="GOV: mesh profile load requested ({profile})"
        {% else %}
            RESPOND MSG="GOV: bed_mesh configured - hydration_flag not set - skipped"
        {% endif %}
    {% else %}
        RESPOND MSG="GOV: bed_mesh not configured - hydration skipped"
    {% endif %}
    RESPOND MSG="GOV: Startup hydration complete"

[delayed_gcode GOV_DELTA_RISK_NOTE]
initial_duration: 1.0
gcode:
    RESPOND MSG="GOV: Risk Note (Delta): home plus probe init required before probing"

[gcode_macro GOV_ECHO]
description: "Emit standardized audit overlays (numeric MUTATION_ID only)"
gcode:
    {% set mid = params.MUTATION_ID|default(0)|int %}
    RESPOND MSG="GOV: Audit Echo (MID={mid})"

[gcode_macro GOV_MESH_LOAD]
description: "Load a bed_mesh profile by name (safe quoting/expansion)"
# Usage: GOV_MESH_LOAD PROFILE=   (defaults to '')
gcode:
    {% set p = params.PROFILE|default(printer.save_variables.variables.gov_last_mesh_profile|default("governance")) %}
  {% if p == "" %}{% set p = "governance" %}{% endif %}
  RESPOND MSG="GOV: bed_mesh detected - loading profile {p}"
  BED_MESH_PROFILE LOAD={p}

[gcode_macro GOV_MESH_SNAPSHOT_SAVE]
description: "Persist last mesh context to save_variables (string-safe)"
# Params (all optional): PROFILE, X_MIN, X_MAX, Y_MIN, Y_MAX, LAYER_H, LINE_WIDTH, FLOW_MULT
gcode:
  # Inputs with safe defaults & casts
  {% set profile = params.PROFILE  | default("governance") %}
  {% set xmin    = params.X_MIN    | default(-120) | float %}
  {% set xmax    = params.X_MAX    | default( 120) | float %}
  {% set ymin    = params.Y_MIN    | default(-120) | float %}
  {% set ymax    = params.Y_MAX    | default( 120) | float %}
  {% set lh      = params.LAYER_H  | default(0.20) | float %}
  {% set lw      = params.LINE_WIDTH | default(0.60) | float %}
  {% set flow    = params.FLOW_MULT  | default(1.15) | float %}

  # Save the profile STRING using nested quotes so save_variables parses it correctly
  SAVE_VARIABLE VARIABLE=gov_last_mesh_profile VALUE="'{profile}'"

  # Numeric saves stay unquoted
  SAVE_VARIABLE VARIABLE=gov_last_mesh_xmin VALUE={xmin}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_xmax VALUE={xmax}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_ymin VALUE={ymin}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_ymax VALUE={ymax}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_lh   VALUE={lh}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_lw   VALUE={lw}
  SAVE_VARIABLE VARIABLE=gov_last_mesh_flow VALUE={flow}

  RESPOND MSG="GOV: snapshot saved profile={profile} bounds=({xmin},{ymin})-({xmax},{ymax})"

[gcode_macro GOV_MESH_SNAPSHOT_CHECK]
description: "Compare incoming mesh context to last saved snapshot (no abs() - no :fmt)"
# Optional params: X_MIN, X_MAX, Y_MIN, Y_MAX, LAYER_H, LINE_WIDTH, FLOW_MULT
# Optional tolerances: TOL_XY (mm), TOL_LH (mm), TOL_LW (mm), TOL_FLOW (ratio)
gcode:
  # ---- Inputs with defaults ----
  {% set xin  = params.X_MIN|default(printer.save_variables.variables.gov_last_mesh_xmin|default(-120))|float %}
  {% set xax  = params.X_MAX|default(printer.save_variables.variables.gov_last_mesh_xmax|default( 120))|float %}
  {% set yin  = params.Y_MIN|default(printer.save_variables.variables.gov_last_mesh_ymin|default(-120))|float %}
  {% set yax  = params.Y_MAX|default(printer.save_variables.variables.gov_last_mesh_ymax|default( 120))|float %}
  {% set lhin = params.LAYER_H|default(printer.save_variables.variables.gov_last_mesh_lh|default(0.20))|float %}
  {% set lwin = params.LINE_WIDTH|default(printer.save_variables.variables.gov_last_mesh_lw|default(0.60))|float %}
  {% set flin = params.FLOW_MULT|default(printer.save_variables.variables.gov_last_mesh_flow|default(1.15))|float %}

  # ---- Previous snapshot (for reporting only) ----
  {% set xps = printer.save_variables.variables.gov_last_mesh_xmin|default(xin)|float %}
  {% set xpe = printer.save_variables.variables.gov_last_mesh_xmax|default(xax)|float %}
  {% set yps = printer.save_variables.variables.gov_last_mesh_ymin|default(yin)|float %}
  {% set ype = printer.save_variables.variables.gov_last_mesh_ymax|default(yax)|float %}
  {% set lh0 = printer.save_variables.variables.gov_last_mesh_lh  |default(lhin)|float %}
  {% set lw0 = printer.save_variables.variables.gov_last_mesh_lw  |default(lwin)|float %}
  {% set fl0 = printer.save_variables.variables.gov_last_mesh_flow|default(flin)|float %}

  # ---- Tolerances ----
  {% set tol_xy   = params.TOL_XY  |default(2.0)|float %}
  {% set tol_lh   = params.TOL_LH  |default(0.05)|float %}
  {% set tol_lw   = params.TOL_LW  |default(0.05)|float %}
  {% set tol_flow = params.TOL_FLOW|default(0.10)|float %}

  # ---- Absolute deltas without abs() ----
  {% set dx1 = xin - xps %}
  {% if dx1 < 0 %}{% set dx1 = -dx1 %}{% endif %}
  {% set dx2 = xax - xpe %}
  {% if dx2 < 0 %}{% set dx2 = -dx2 %}{% endif %}
  {% set dy1 = yin - yps %}
  {% if dy1 < 0 %}{% set dy1 = -dy1 %}{% endif %}
  {% set dy2 = yax - ype %}
  {% if dy2 < 0 %}{% set dy2 = -dy2 %}{% endif %}

  {% set dlh = lhin - lh0 %}
  {% if dlh < 0 %}{% set dlh = -dlh %}{% endif %}
  {% set dlw = lwin - lw0 %}
  {% if dlw < 0 %}{% set dlw = -dlw %}{% endif %}
  {% set dfl = flin - fl0 %}
  {% if dfl < 0 %}{% set dfl = -dfl %}{% endif %}

  # ---- Round for printing (no :fmt) ----
  {% set dx1_r2 = dx1 | round(2) %}
  {% set dx2_r2 = dx2 | round(2) %}
  {% set dy1_r2 = dy1 | round(2) %}
  {% set dy2_r2 = dy2 | round(2) %}
  {% set dlh_r3 = dlh | round(3) %}
  {% set dlw_r3 = dlw | round(3) %}
  {% set dfl_r2 = dfl | round(2) %}

  # ---- Decide ----
  {% set xy_ok   = (dx1 <= tol_xy) and (dx2 <= tol_xy) and (dy1 <= tol_xy) and (dy2 <= tol_xy) %}
  {% set lh_ok   = (dlh <= tol_lh) %}
  {% set lw_ok   = (dlw <= tol_lw) %}
  {% set flow_ok = (dfl <= tol_flow) %}
  {% set all_ok  = xy_ok and lh_ok and lw_ok and flow_ok %}

  RESPOND MSG="GOV: snapshot compare prev=({xps},{yps})-({xpe},{ype}) curr=({xin},{yin})-({xax},{yax})"
  RESPOND MSG="GOV: deltas XY=({dx1_r2},{dy1_r2})/({dx2_r2},{dy2_r2}) tol={tol_xy} LH={dlh_r3} tol={tol_lh} LW={dlw_r3} tol={tol_lw} FLOW={dfl_r2} tol={tol_flow}"

  {% if all_ok %}
    RESPOND MSG="GOV: snapshot within tolerance - mesh reuse OK"
  {% else %}
    RESPOND MSG="GOV: snapshot drift beyond tolerance - re-mesh recommended"
  {% endif %}

# ======================
# Stage-2 - Probe Guard
# ======================
[gcode_macro PROBE_STATE_GOV]
description: "Session vars for last probe touch and relative result"
variable_last_x: 0.0
variable_last_y: 0.0
variable_last_z_abs: 0.0
variable_last_ok: 0
variable_last_z_rel: 0.0
gcode:
    RESPOND MSG="GOV: probe state container ready"
[gcode_macro GOV_PROBE_VALIDATE]
description: "Validate probe configuration and home before probing (delta-safe)"
gcode:
    RESPOND MSG="GOV: probe validation begin"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
  {% set zmax = printer.toolhead.axis_maximum.z|float %}
  {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    {% if printer.configfile.settings.probe is defined %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=1
        RESPOND MSG="GOV: probe section detected - ready"
    {% else %}
        SAVE_VARIABLE VARIABLE=gov_probe_ready VALUE=0
        RESPOND MSG="GOV: probe section missing - validation failed"
        {% if printer.configfile.settings.pause_resume is defined %}
            PAUSE
        {% endif %}
  {% endif %}
    RESPOND MSG="GOV: probe validation complete"
[gcode_macro GOV_PROBE_FLAGS_READ]
description: "Read back probe readiness flag"
gcode:
    {% set ready = printer.save_variables.variables.gov_probe_ready|default(0)|int %}
    RESPOND MSG="GOV: probe_ready_flag={ready}"
    
[gcode_macro GOV_PROBE_TOUCH_CENTER_CAPTURE]
description: "Active touch at bed center using PROBE - capture absolute x y z - then lift (delta-safe)"
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
  {% set zmax = printer.toolhead.axis_maximum.z|float %}
  {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000
    G1 X0 Y0 F6000
    RESPOND MSG="GOV: probe touch capture begin"
    {% if printer.configfile.settings.probe is defined %}
        PROBE
        {% set px = printer.toolhead.position.x|float %}
  {% set py = printer.toolhead.position.y|float %}
  {% set pz_abs = printer.toolhead.position.z|float %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_x VALUE={px}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_y VALUE={py}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_abs VALUE={pz_abs}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=1
        SAVE_VARIABLE VARIABLE=gov_last_probe_x VALUE={px}
        SAVE_VARIABLE VARIABLE=gov_last_probe_y VALUE={py}
        SAVE_VARIABLE VARIABLE=gov_last_probe_z_abs VALUE={pz_abs}
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=1
        RESPOND MSG="GOV: probe captured abs x={px} y={py} z={pz_abs}"
        G1 Z{zsafe} F6000
        RESPOND MSG="GOV: probe touch capture complete"
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_ok VALUE=0
        SAVE_VARIABLE VARIABLE=gov_probe_last_ok VALUE=0
        RESPOND MSG="GOV: probe section missing - cannot PROBE"
    {% endif %}
    
[gcode_macro GOV_PROBE_RECORD_RESULT]
description: "Record the small relative probe result reported in console (RESULT=<float>)"
gcode:
    {% set rel = params.RESULT|default(0.0)|float %}
    SET_GCODE_VARIABLE MACRO=PROBE_STATE_GOV VARIABLE=last_z_rel VALUE={rel}
    SAVE_VARIABLE VARIABLE=gov_last_probe_z_rel VALUE={rel}
    RESPOND MSG="GOV: recorded relative result z={rel}"

[gcode_macro GOV_PROBE_READBACK_VERBOSE]

description: "Echo last captured abs x y z, relative z, and ok flag from save_variables"
gcode:
    {% set px = printer.save_variables.variables.gov_last_probe_x|default(0.0)|float %}
  {% set py = printer.save_variables.variables.gov_last_probe_y|default(0.0)|float %}
  {% set pz_abs = printer.save_variables.variables.gov_last_probe_z_abs|default(0.0)|float %}
  {% set pz_rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
  {% set ok = printer.save_variables.variables.gov_probe_last_ok|default(0)|int %}
    RESPOND MSG="GOV: last_probe_x={px}"
    RESPOND MSG="GOV: last_probe_y={py}"
    RESPOND MSG="GOV: last_probe_z_abs={pz_abs}"
    RESPOND MSG="GOV: last_probe_z_rel={pz_rel}"
    RESPOND MSG="GOV: last_probe_ok={ok}"

[gcode_macro GOV_PROBE_OFFSET_SUGGEST]

description: "Suggest a Z-offset delta from last recorded relative result"
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
  {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: last_rel_z={rel} suggested_z_offset_delta={delta}"
    RESPOND MSG="GOV: apply negative of measured if needed so target is zero"
    
[gcode_macro GOV_Z_OFFSET_APPLY]

description: "Apply a live Z offset adjustment (DELTA=<float>), -logged"
gcode:
    {% set d = params.DELTA|default(0.0)|float %}
    RESPOND MSG="GOV: applying live Z offset adjust delta={d}"
    SET_GCODE_OFFSET Z_ADJUST={d}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={d}
    RESPOND MSG="GOV: live offset adjusted - run GOV_Z_OFFSET_COMMIT to persist"
    
[gcode_macro GOV_Z_OFFSET_COMMIT]
description: "Persist the current live Z offset using SAVE_CONFIG (will restart)"
gcode:
    RESPOND MSG="GOV: persisting live Z offset via SAVE_CONFIG"
    SAVE_CONFIG
    
[gcode_macro GOV_PROBE_OFFSET_APPLY_SUGGEST]
description: "Auto-apply suggested Z-offset from last relative probe result"
gcode:
    {% set rel = printer.save_variables.variables.gov_last_probe_z_rel|default(0.0)|float %}
  {% set delta = (0.0 - rel)|float %}
    RESPOND MSG="GOV: auto-applying suggested delta from last_rel_z={rel}"
    SET_GCODE_OFFSET Z_ADJUST={delta}
    SAVE_VARIABLE VARIABLE=gov_last_z_offset_delta VALUE={delta}
    RESPOND MSG="GOV: live offset adjusted by {delta} - use GOV_Z_OFFSET_COMMIT to persist"

# ======================
# Launcher - Start/End
# ======================
[gcode_macro PRINT_LAUNCHER]
description: "Handoff - heaters - delta-safe descend - mesh+purge - FLS arm"
variable_e: 210
variable_b: 60
variable_xmin: 0.0
variable_xmax: 0.0
variable_ymin: 0.0
variable_ymax: 0.0
variable_fls: 50
variable_flf: 0
variable_lh: 0.2
variable_linew: 0.6
variable_flow: 1.5
gcode:
  {% set e     = printer["gcode_macro PRINT_LAUNCHER"].e     | int   %}
  {% set b     = printer["gcode_macro PRINT_LAUNCHER"].b     | int   %}
  {% set xmin  = printer["gcode_macro PRINT_LAUNCHER"].xmin  | float %}
  {% set xmax  = printer["gcode_macro PRINT_LAUNCHER"].xmax  | float %}
  {% set ymin  = printer["gcode_macro PRINT_LAUNCHER"].ymin  | float %}
  {% set ymax  = printer["gcode_macro PRINT_LAUNCHER"].ymax  | float %}
  {% set fls   = printer["gcode_macro PRINT_LAUNCHER"].fls   | int   %}
  {% set flf   = printer["gcode_macro PRINT_LAUNCHER"].flf   | int   %}
  {% set lh    = printer["gcode_macro PRINT_LAUNCHER"].lh    | float %}
  {% set linew = printer["gcode_macro PRINT_LAUNCHER"].linew | float %}
  {% set flow  = printer["gcode_macro PRINT_LAUNCHER"].flow  | float %}

  RESPOND MSG="GOV: PRINT_LAUNCHER begin"
  RESPOND MSG="GOV: heating targets extruder={e} bed={b}"
  M104 S{e}
  M140 S{b}
  M190 S{b}
  M109 S{e}
  RESPOND MSG="GOV: heaters ready"
  
  # defensive stop of any old heartbeat
  GOV_FUI_STOP

  # Delta-safe descend before any mesh/purge
  GOV_SAFE_DESCEND

  # Clamp slicer bounds into delta circle to avoid 'move out of range'
  {% set rx = printer.toolhead.axis_maximum.x|float %}
  {% set ry = printer.toolhead.axis_maximum.y|float %}
  {% set r  = rx if rx < ry else ry %}
  {% set clip = r - 5.0 %}
  {% if xmin < -clip %}{% set xmin = -clip %}{% endif %}
  {% if xmax >  clip %}{% set xmax =  clip %}{% endif %}
  {% if ymin < -clip %}{% set ymin = -clip %}{% endif %}
  {% if ymax >  clip %}{% set ymax =  clip %}{% endif %}
  {% set have_bounds = (xmax > xmin) and (ymax > ymin) %}

  # 1) Capture BEFORE throttling
  GOV_FLS_CAPTURE_ORIG

  # 2) Throttle for first layer
  RESPOND MSG="GOV: first-layer mode speed={fls}% fan={flf}%"
  M220 S{fls}
  {% if flf > 0 %} M106 S{(flf*2.55)|int} {% else %} M107 {% endif %}

  # 3) Arm the release
  UPDATE_DELAYED_GCODE ID=GOV_FLS_AUDIT DURATION=120
  UPDATE_DELAYED_GCODE ID=GOV_LAYER_FALLBACK DURATION={ printer["gcode_macro GOV_PHASE"].slow_layers|int * 180 }
  GOV_FLS_ARM RELEASE_Z=0.8
  
  {% if have_bounds %}
    RESPOND MSG="GOV: bounds OK -> mesh+purge"
    GOV_CANARY_ADAPTIVE_PREP X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}
    GOV_PURGE_PRIME          X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow} PURGE_LEN=90 PASSES=2 PRIME_MM=8
  {% else %}
    RESPOND MSG="GOV: no bounds provided - skipping mesh+purge"
  {% endif %}

  RESPOND MSG="GOV: PRINT_LAUNCHER handoff complete"
  
[gcode_macro START_PRINT_SEQUENCE_GOV]
description: "Governance-patched start sequence (delta-safe homing, heating, optional CLEAN/LOAD, first-layer stability)"
gcode:
    RESPOND MSG="GOV: START sequence begin"
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set zmax = printer.toolhead.axis_maximum.z|default(250.0)|float %}
    {% set zsafe = (zmax - 50.0) if zmax > 60 else (zmax - 10.0) %}
    G90
    G1 Z{zsafe} F6000

    {% set hyd = printer.save_variables.variables.gov_default_mesh|default(0)|int %}
    {% if hyd == 1 %}
        RESPOND MSG="GOV: ensuring mesh is hydrated (governance mapping)"
        GOV_HYDRATE_NOW
    {% endif %}

    {% set e = params.EXTRUDER|default(210)|int %}
    {% set b = params.BED|default(60)|int %}
    RESPOND MSG="GOV: heating targets extruder={e} bed={b}"
    M104 S{e}
    M140 S{b}
    M109 S{e}
    M190 S{b}
    RESPOND MSG="GOV: heaters ready"

    # -------- First-layer stability mode --------
    {% set slowpct = params.FIRST_LAYER_SPEED|default(50)|int %}
    {% if slowpct < 10  %}
  {% set slowpct = 10  %}
    {% endif %}
    {% if slowpct > 100  %}
  {% set slowpct = 100  %}
    {% endif %}
    M220 S{slowpct}
    {% set fanpct = params.FIRST_LAYER_FAN|default(0)|int %}
    {% if fanpct < 0  %}
  {% set fanpct = 0  %}
    {% endif %}
    {% if fanpct > 100  %}
  {% set fanpct = 100  %}
    {% endif %}
    {% set fanpwm = (fanpct * 2.55)|int %}
    M106 S{fanpwm}
    RESPOND MSG="GOV: first-layer mode speed={slowpct}% fan={fanpct}%"

    {% if 'PREHEAT_ONLY' in params %}
        RESPOND MSG="GOV: PREHEAT_ONLY requested - ending start sequence"
        RETURN
    {% endif %}

    {% if 'CLEAN' in params %}
        RESPOND MSG="GOV: CLEAN requested"
        CLEAN_FILAMENT S={e}
    {% endif %}
    {% if 'LOAD' in params %}
        RESPOND MSG="GOV: LOAD requested"
        LOAD_FILAMENT S={e}
    {% endif %}

    {% set xmin = params.X_MIN|default(0.0)|float %}
    {% set xmax = params.X_MAX|default(0.0)|float %}
    {% set ymin = params.Y_MIN|default(0.0)|float %}
    {% set ymax = params.Y_MAX|default(0.0)|float %}
    {% set use_bounds = (xmax > xmin) and (ymax > ymin) %}
    {% if use_bounds %}
        {% set cx = (xmin + xmax) / 2.0 %}
        {% set cy = (ymin + ymax) / 2.0 %}
        RESPOND MSG="GOV: moving to print area center X={cx} Y={cy}"
        G1 X{cx} Y{cy} F9000
    {% else %}
        RESPOND MSG="GOV: no bounds provided - skipping center move"
    {% endif %}

    RESPOND MSG="GOV: START sequence complete"

[gcode_macro GOV_CANARY_ADAPTIVE_PREP]
description: "Adaptive mesh + front-quadrant purge, slicer-bounded, gated (rectangular mesh)"
gcode:
  # -------- Params (raw) --------
  {% set xmin_raw = params.X_MIN | default(0) %}
  {% set xmax_raw = params.X_MAX | default(0) %}
  {% set ymin_raw = params.Y_MIN | default(0) %}
  {% set ymax_raw = params.Y_MAX | default(0) %}
  {% set fls_raw  = params.FIRST_LAYER_SPEED | default(50) %}
  {% set flf_raw  = params.FIRST_LAYER_FAN   | default(0) %}
  {% set lh_raw   = params.LAYER_H           | default(0.2) %}
  {% set line_w_raw   = params.LINE_WIDTH    | default(0.6) %}
  {% set flow_mult_raw = params.FLOW_MULT    | default(1.5) %}

  # -------- Casts (explicit) --------
  {% set xmin = xmin_raw | float %}
  {% set xmax = xmax_raw | float %}
  {% set ymin = ymin_raw | float %}
  {% set ymax = ymax_raw | float %}
  {% set fls  = fls_raw  | int %}
  {% set flf  = flf_raw  | int %}
  {% set lh   = lh_raw   | float %}
  {% set line_w    = line_w_raw | float %}
  {% set flow_mult = flow_mult_raw | float %}

  # -------- Delta-safe clamp of slicer bounds --------
  {% set rx = printer.toolhead.axis_maximum.x | float %}
  {% set ry = printer.toolhead.axis_maximum.y | float %}
  {% set r  = rx if rx < ry else ry %}
  {% set clip = r - 5.0 %}
  {% if xmin < -clip %}{% set xmin = -clip %}{% endif %}
  {% if xmax >  clip %}{% set xmax =  clip %}{% endif %}
  {% if ymin < -clip %}{% set ymin = -clip %}{% endif %}
  {% if ymax >  clip %}{% set ymax =  clip %}{% endif %}

  # -------- Geometry & purge height --------
  {% set purge_h = lh * 1.5 %}
  {% set arc_len = 60.0 %}
  {% set margin  = 1.0 %}
  {% set bed_x = (xmax - xmin) %}
  {% set xmid = (xmin + (bed_x / 2.0)) %}
  {% set half = (arc_len / 2.0) %}
  {% set x0p = (xmid - half) %}
  {% if x0p < (xmin + margin) %}{% set x0p = (xmin + margin) %}{% endif %}
  {% set x1max = (xmax - margin) %}
  {% set x1p = (x0p + arc_len) %}
  {% if x1p > x1max %}{% set x1p = x1max %}{% endif %}
  {% set x0 = (x1p - arc_len) %}
  {% set y0 = (ymin + margin) %}
  {% set y1 = (y0 + 1.0) %}

  # -------- Derived (rounded) for RESPOND --------
  {% set xmin_r2 = xmin | round(2) %}
  {% set ymin_r2 = ymin | round(2) %}
  {% set xmax_r2 = xmax | round(2) %}
  {% set ymax_r2 = ymax | round(2) %}
  {% set purge_h_r3 = purge_h | round(3) %}
  {% set len_mm = (x1p - x0) %}
  {% set len_mm_r1 = len_mm | round(1) %}
  {% set x0_r3 = x0 | round(3) %}
  {% set y0_r3 = y0 | round(3) %}
  {% set x1p_r3 = x1p | round(3) %}
  {% set y1_r3 = y1 | round(3) %}
  {% set s_fan = (flf * 2.55) | round(0) | int %}
  {% set feed = (fls * 60) | int %}

  RESPOND MSG="GOV PLAN (rect): BED_MESH_CALIBRATE MESH_MIN=({xmin_r2|string},{ymin_r2|string}) - MESH_MAX=({xmax_r2|string},{ymax_r2|string})"
  RESPOND MSG="GOV PLAN: Purge Z={purge_h_r3|string}mm - Speed={fls|string} - Fan%={flf|string} - Len={len_mm_r1|string}"
            
  # -------- Mesh gate --------
  {% set gov_mesh = printer.save_variables.variables.gov_default_mesh | default(1) | int %}
  {% set factory_done = printer.save_variables.variables.factory_cal_complete | default(0) | int %}
  {% if factory_done != 1 %}
    RESPOND MSG="DRIFT_ALERT: Factory calibration not confirmed - skipping automated mesh"
  {% elif gov_mesh != 1 %}
    RESPOND MSG="GOV: Mesh hydration gated by gov_default_mesh=0 - skipping BED_MESH_CALIBRATE"
  {% else %}
    RESPOND MSG="GOV: Hydrating mesh after 2.0s delay"
    G4 P2000
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE MESH_MIN={xmin},{ymin} MESH_MAX={xmax},{ymax}
    {% if printer["gcode_macro GOV_MESH_SNAPSHOT_SAVE"] is defined %}
      GOV_MESH_SNAPSHOT_SAVE PROFILE=governance X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} LAYER_H={lh} LINE_WIDTH={line_w} FLOW_MULT={flow_mult}
    {% endif %}
  {% endif %}

  # -------- Purge path --------
  {% set segs = 12 %}
  {% set pass_len = (x1p - x0) %}
  {% set area = 3.1415926535 * (1.75 / 2.0) * (1.75 / 2.0) %}
  {% set vol_per_mm = (line_w * purge_h * flow_mult) %}
  {% set e_per_mm = (vol_per_mm / area) %}
  {% set seg_len = (pass_len / segs) %}
  {% set e_seg_r4 = (e_per_mm * seg_len) | round(4) %}

  SAVE_GCODE_STATE NAME=GOV_ADAPT_PURGE_STATE
  G90
  M83
  G92 E0

  {% if s_fan > 0 %} M106 S{s_fan} {% else %} M107 {% endif %}

  # Pass 1
  G1 Z{purge_h_r3} F1200
  G1 X{x0_r3} Y{y0_r3} F6000
  {% for i in range(1, segs + 1) %}
    {% set t = (i / segs) %}
    {% set x_cur = (x0 + (pass_len * t)) %}
    {% set y_cur = (y0 + (4.0 * 0.5 * t * (1.0 - t))) %}
    G1 X{ x_cur | round(3) } Y{ y_cur | round(3) } E{ e_seg_r4 } F{ feed }
  {% endfor %}

  # Pass 2
  G1 X{x1p_r3} Y{y1_r3} F6000
  {% for i in range(1, segs + 1) %}
    {% set t2 = (i / segs) %}
    {% set x2_cur = (x1p - (pass_len * t2)) %}
    {% set y2_cur = (y1 + (4.0 * 0.5 * t2 * (1.0 - t2))) %}
    G1 X{ x2_cur | round(3) } Y{ y2_cur | round(3) } E{ e_seg_r4 } F{ feed }
  {% endfor %}

  G1 E-0.6 F1800
  RESTORE_GCODE_STATE NAME=GOV_ADAPT_PURGE_STATE MOVE=1
# --- end GOV Canary ---

[gcode_macro GOV_PURGE_PRIME]
description: "Delta-safe front purge using slicer bounds"
# Optional:
#  X_MIN,X_MAX,Y_MIN,Y_MAX (from slicer)
#  FIRST_LAYER_SPEED, FIRST_LAYER_FAN, LAYER_H, LINE_WIDTH, FLOW_MULT
#  PURGE_LEN (default 90), PASSES (default 2), PRIME_MM (default 8)
gcode:
  # ---- Inputs ----
  {% set xmin = params.X_MIN|default(0)|float %}
  {% set xmax = params.X_MAX|default(0)|float %}
  {% set ymin = params.Y_MIN|default(0)|float %}
  {% set ymax = params.Y_MAX|default(0)|float %}
  {% set fls  = params.FIRST_LAYER_SPEED|default(50)|int %}
  {% set flf  = params.FIRST_LAYER_FAN|default(0)|int %}
  {% set lh   = params.LAYER_H|default(0.20)|float %}
  {% set lw   = params.LINE_WIDTH|default(0.60)|float %}
  {% set flow = params.FLOW_MULT|default(1.15)|float %}
  {% set passes = params.PASSES|default(2)|int %}
  {% set purge_len = params.PURGE_LEN|default(90)|float %}
  {% set prime_mm = params.PRIME_MM|default(12)|float %}

  # ---- Delta geometry & clamp ----
  {% set rx = printer.toolhead.axis_maximum.x|float %}
  {% set ry = printer.toolhead.axis_maximum.y|float %}
  {% set r  = rx if rx < ry else ry %}
  {% set edge = r - 12.0 %}

  {% if xmin < -edge %}{% set xmin = -edge %}{% endif %}
  {% if xmax >  edge %}{% set xmax =  edge %}{% endif %}
  {% if ymin < -edge %}{% set ymin = -edge %}{% endif %}
  {% if ymax >  edge %}{% set ymax =  edge %}{% endif %}

  # Place purge near front (negative Y) and keep X span inside circle
  {% set y0 = 0.0 - (edge - 6.0) %}
  {% if y0 < -edge %}{% set y0 = -edge + 1.0 %}{% endif %}
  {% set y1 = y0 + 1.0 %}

  {% set half = purge_len/2.0 %}
  {% set x0 = 0.0 - half %}
  {% set x1 = 0.0 + half %}
  {% if x0 < -edge %}{% set x0 = -edge + 6.0 %}{% endif %}
  {% if x1 >  edge %}{% set x1 =  edge - 6.0 %}{% endif %}
  {% set run_len = x1 - x0 %}
  {% if run_len < 20.0 %}
    {% set x0 = -10.0 %}
    {% set x1 =  10.0 %}
    {% set run_len = 20.0 %}
  {% endif %}

  # ---- Extrusion math ----
  {% set fd = printer.extruder.filament_diameter|default(1.75)|float %}
  {% set area = 3.1415926535 * (fd/2.0) * (fd/2.0) %}
  {% set purge_h = lh * 1.5 %}
  {% set vol_per_mm = lw * purge_h * flow %}
  {% set e_per_mm = vol_per_mm / area %}
  {% set e_run = e_per_mm * run_len %}

  {% set feed_print = (fls * 60)|int %}
  {% set fan_pwm = (flf * 2.55)|int %}

  # ---- Rounded for output ----
  {% set y0_r = y0|round(3) %}
  {% set y1_r = y1|round(3) %}
  {% set x0_r = x0|round(3) %}
  {% set x1_r = x1|round(3) %}
  {% set zh_r = purge_h|round(3) %}
  {% set e_run_r = e_run|round(3) %}
  {% set e_prime_r = prime_mm|round(2) %}
  {% set run_len_r1 = run_len|round(1) %}

  RESPOND MSG="GOV PURGE: blob={e_prime_r}mm + {passes}x{run_len_r1}mm @ Z={zh_r} (speed={fls} fan={flf}%)"

  SAVE_GCODE_STATE NAME=GOV_PURGE_STATE
  G90
  M83
  G92 E0

  {% if flf > 0 %} M106 S{fan_pwm} {% else %} M107 {% endif %}

  G1 Z{zh_r} F1200
  G1 X{x0_r} Y{y0_r} F6000
  G1 E{e_prime_r} F300

  G1 X{x1_r} Y{y0_r} E{e_run_r} F{feed_print}
  {% if passes > 1 %}
    G1 X{x1_r} Y{y1_r} F6000
    G1 X{x0_r} Y{y1_r} E{e_run_r} F{feed_print}
  {% endif %}

  G1 E-0.6 F1800
  RESTORE_GCODE_STATE NAME=GOV_PURGE_STATE MOVE=1
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=purge_done VALUE=1
  
[gcode_macro PRINT_END]
description: "Depressurize, delta-safe home, park mid-Z while cooling, then engage top catch before motors off"
variable_cool_extruder: 100
variable_cool_bed: 55
variable_catch_margin_z: -0.25
variable_catch_xy_x: 0.0
variable_catch_xy_y: 0.0
gcode:
  RESPOND MSG="GOV: PRINT_END sequence"

  # --- Depressurize & small hop (relative) ---
  G91
  G1 E-3.0 F1800
  G1 Z+3 F1200
  G90

  # --- Home first (delta-safe) ---
  G28

  # --- Quick temp dip to reduce ooze while parking ---
  {% set tgt = printer.extruder.target|int %}
  {% if tgt > 150 %}
    M104 S{tgt - 15}
  {% endif %}

  # --- Park center at mid-Z (safe XY on delta) ---
  {% set zmax = printer.toolhead.axis_maximum.z|float %}
  {% set zpark = (zmax * 0.5)|float %}
  {% if zpark > (zmax - 10) %}
    {% set zpark = zmax - 10 %}
  {% endif %}
  G1 X0 Y0 Z{zpark|round(2)} F9000

  # --- Heaters & fan off ---
  M106 S0
  TURN_OFF_HEATERS

  # --- Schedule cool-and-catch helper (moves to catch, then disables) ---
  UPDATE_DELAYED_GCODE ID=GOV_COOL_THEN_CATCH_THEN_DISABLE DURATION=25
  {% if "gcode_macro FUI_STOP" in printer %}
    FUI_STOP
  {% endif %}
  RESPOND MSG="GOV: PRINT_END staged cool-and-catch"

# Helper: wait for cool thresholds, then move to top catch position and disable steppers
[delayed_gcode GOV_COOL_THEN_CATCH_THEN_DISABLE]
gcode:
  {% set cool_e = printer["gcode_macro PRINT_END"].cool_extruder|int %}
  {% set cool_b = printer["gcode_macro PRINT_END"].cool_bed|int %}
  {% set te = printer.extruder.temperature|float %}
  {% set tb = printer.heater_bed.temperature|float %}
  {% if (te > cool_e) or (tb > cool_b) %}
    RESPOND MSG="GOV: waiting to cool (hotend={te|round(1)}C>{cool_e}C or bed={tb|round(1)}C>{cool_b}C)"
    UPDATE_DELAYED_GCODE ID=GOV_COOL_THEN_CATCH_THEN_DISABLE DURATION=25
    
  {% else %}
    {% set zmax = printer.toolhead.axis_maximum.z|float %}
    {% set margin = printer["gcode_macro PRINT_END"].catch_margin_z|float %}
    {% set xcatch = printer["gcode_macro PRINT_END"].catch_xy_x|float %}
    {% set ycatch = printer["gcode_macro PRINT_END"].catch_xy_y|float %}
    {% set zcatch = (zmax - margin)|float %}
    # Clamp to at most +1.0 above computed max
    {% if zcatch > (zmax + 1.0) %}
      {% set zcatch = zmax + 1.0 %}
    {% endif %}
    RESPOND MSG="GOV: Cooling moving to catch X={xcatch} Y={ycatch} Z={zcatch|round(2)}"
    G90
    G1 X{xcatch} Y{ycatch} Z{zcatch|round(2)} F1800
    RESPOND MSG="GOV: Engaging top catch disabling steppers"
    M84
  {% endif %}
  
# =========================
# First-layer stability (robust)
# =========================

[gcode_macro GOV_FLS_CTL]
# First-layer stability control (state only-no gcode body)
variable_orig_speed: 100      # captured pre-FLS speed %
variable_orig_fan: 0          # captured pre-FLS fan %
variable_release_z: 0.60      # gate height (mm)
variable_min_time: 300         # extra guard: seconds since arming
variable_armed: 0          # 1 while first-layer lock is active
variable_armed_at: 0          # total_duration at arming
variable_purge_done: 0     # set to 1 by GOV_PURGE_PRIME when purge completes
gcode:
  RESPOND MSG="FLS state: armed={armed} rz={release_z} orig={orig_speed}%/{orig_fan}%"

[gcode_macro GOV_FLS_CAPTURE_ORIG]
gcode:
  {% set spf = (printer.gcode_move.speed_factor * 100.0)|int %}
  {% set fan_now_pwm = printer.fan.speed|default(0.0)|float %}
  {% set maxp = printer.fan.max_power|default(1.0)|float %}
  {% set fan_now = (fan_now_pwm/maxp * 100.0)|int %}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=orig_speed VALUE={spf}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=orig_fan   VALUE={fan_now}

  RESPOND MSG="GOV FLS: captured orig speed={spf|int}% fan={fan_now|int}%"

[gcode_macro FIRST_LAYER_STABLE_RELEASE]
description: "Restore speed/fan to captured originals (or overrides)"
gcode:
  {% set os = printer["gcode_macro GOV_FLS_CTL"].orig_speed|default(100)|int %}
  {% set of = printer["gcode_macro GOV_FLS_CTL"].orig_fan|default(0)|int %}
  {% set rs = params.RESTORE_SPEED|default(os)|int %}
  {% set rf = params.FAN|default(of)|int %}

  {% if rs < 10 %}{% set rs = 10 %}{% endif %}
  {% if rs > 300 %}{% set rs = 300 %}{% endif %}
  {% if rf < 0 %}{% set rf = 0 %}{% endif %}
  {% if rf > 100 %}{% set rf = 100 %}{% endif %}

  M220 S{rs}
  {% if rf > 0 %} M106 S{(rf*2.55)|int} {% else %} M107 {% endif %}
  RESPOND MSG="GOV: first-layer mode released speed={rs}% fan={rf}% (captured)"
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=0

[gcode_macro GOV_FLS_STATE]
description: "Holds target release Z for first-layer stability"
variable_release_z: 0.60
gcode:
  RESPOND MSG="GOV: FLS state ready (release_z={printer('gcode_macro GOV_FLS_STATE').release_z})"
  RESPOND MSG="FLS state: armed={armed} release_z={release_z} orig_speed={orig_speed}% orig_fan={orig_fan}%"

[gcode_macro GOV_FLS_ARM]
description: "Arm first-layer lock (release at RELEASE_Z after purge)"
gcode:
  {% set rz = params.RELEASE_Z|default(0.60)|float %}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=release_z VALUE={rz}
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=1
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=purge_done VALUE=0
  UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=25
  RESPOND MSG="GOV: FLS armed rz={rz}"

[gcode_macro GOV_SAFE_DESCEND]
description: "Delta-safe descend to a usable Z before mesh/purge"
gcode:
  {% set zmax  = printer.toolhead.axis_maximum.z | float %}
  {% set curz  = printer.gcode_move.position.z   | float %}
  {% set lift  = 15.0 %}
  {% set minz  = 5.0 %}

  # Calculate new target
  {% set target = curz %}
  {% if target > (zmax - lift) %}
    {% set target = zmax - lift %}
  {% endif %}
  {% if target < minz %}
    {% set target = minz %}
  {% endif %}

  RESPOND MSG="GOV: safe descend to Z={target|round(2)}"
  G90
  G1 Z{target|round(2)} F6000

[delayed_gcode GOV_FLS_MON]
gcode:
  {% set ctl = printer["gcode_macro GOV_FLS_CTL"] %}
  {% if ctl.armed|int == 0 %}
    UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=0
  {% else %}
    {% set printing = 0 %}
    {% if printer.print_stats.state == "printing" %}
      {% set printing = 1 %}
    {% endif %}
    {% set homed = 0 %}
    {% if printer.toolhead.homed_axes == "xyz" %}
      {% set homed = 1 %}
    {% endif %}
    {% set cz = 0.0 %}
    {% if homed == 1 %}
      {% set cz = printer.toolhead.position.z|float %}
    {% endif %}
    {% set rz = ctl.release_z|float %}
    {% set purge = ctl.purge_done|int %}

    {% if printing == 1 and purge == 1 and cz >= rz %}
      RESPOND MSG="GOV: releasing first-layer lock at Z={cz} (>= {rz})"
      FIRST_LAYER_STABLE_RELEASE
      UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=0
    {% else %}
      UPDATE_DELAYED_GCODE ID=GOV_FLS_MON DURATION=25
    {% endif %}
  {% endif %}

[gcode_macro GOV_FLS_FORCE_RELEASE]
gcode:
  RESPOND MSG="GOV: manual FLS release"
  SET_GCODE_VARIABLE MACRO=GOV_FLS_CTL VARIABLE=armed VALUE=0

[delayed_gcode GOV_FLS_AUDIT]
gcode:
  {% set armed = printer["gcode_macro GOV_FLS_CTL"].armed|int %}
  {% set fld = printer["gcode_macro GOV_PHASE"].first_layer_done|int %}
  {% if armed == 0 and fld == 1 %}
    {% set sf = (printer.gcode_move.speed_factor * 100.0)|int %}
    {% if sf < 100 %}
      RESPOND MSG="GOV: audit corrected speed {sf}% -> 100%"
      M220 S100
    {% endif %}
  {% else %}
    RESPOND MSG="GOV: audit skipped (first-layer active)"
  {% endif %}
  {% if printer.print_stats.state == "printing" %}
    UPDATE_DELAYED_GCODE ID=GOV_FLS_AUDIT DURATION=120
  {% else %}
    UPDATE_DELAYED_GCODE ID=GOV_FLS_AUDIT DURATION=0
  {% endif %}

[gcode_macro GOV_PHASE]
variable_slow_layers: 3        # default = 1 layer slow
variable_layer: 0
variable_layer_z: 0.0
gcode:

[gcode_macro GOV_LAYER_TICK]
description: "Report layer boundary - cancel fallback - restore when layer >= slow_layers"
gcode:
  {% set L = params.LAYER|default(params.layer|default(params.layer_num|default(-1)))|int %}
  {% set Z = params.Z|default(params.z|default(params.layer_z|default(0.0)))|float %}
  SET_GCODE_VARIABLE MACRO=GOV_PHASE VARIABLE=layer VALUE={L}
  SET_GCODE_VARIABLE MACRO=GOV_PHASE VARIABLE=layer_z VALUE={Z}
  RESPOND MSG="GOV: layer tick L={L} Z={Z}"
  UPDATE_DELAYED_GCODE ID=GOV_LAYER_FALLBACK DURATION=0
  {% set slow_n = printer["gcode_macro GOV_PHASE"].slow_layers|int %}
  {% if L >= slow_n and L >= 0 %}
    M220 S100
    RESPOND MSG="GOV: slow-layer window done at L={L} â†’ speed 100%"
  {% endif %}

[delayed_gcode GOV_LAYER_FALLBACK]
gcode:
  {% set slow_n = printer["gcode_macro GOV_PHASE"].slow_layers|int %}
  # assume max 3 minutes per layer, auto-restore after N * 180s
  M220 S100
  RESPOND MSG="GOV: fallback restore â†’ speed 100% (no layer ticks seen)"

[gcode_macro GOV_FIRST_LAYER_DONE]
description: "Mark first layer complete and restore default speed"
gcode:
  SET_GCODE_VARIABLE MACRO=GOV_PHASE VARIABLE=first_layer_done VALUE=1
  M220 S100
  RESPOND MSG="GOV: first layer complete â†’ speed 100%"

[gcode_macro START_PRINT]
description: "Relay: START_PRINT -> PRINT_LAUNCHER (with param forwarding + defaults)"
gcode:
  {% set e     = params.EXTRUDER_TEMP     | default(230)   | int %}
  {% set b     = params.BED_TEMP          | default(60)    | int %}
  {% set xmin  = params.X_MIN             | default(-120)  | float %}
  {% set xmax  = params.X_MAX             | default(120)   | float %}
  {% set ymin  = params.Y_MIN             | default(-120)  | float %}
  {% set ymax  = params.Y_MAX             | default(120)   | float %}
  {% set fls   = params.FIRST_LAYER_SPEED | default(50)    | int %}
  {% set flf   = params.FIRST_LAYER_FAN   | default(0)     | int %}
  {% set lh    = params.LAYER_H           | default(0.2)   | float %}
  {% set linew = params.LINE_WIDTH        | default(0.6)   | float %}
  {% set flow  = params.FLOW_MULT         | default(1.5)   | float %}
  PRINT_LAUNCHER EXTRUDER_TEMP={e} BED_TEMP={b} X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}

[gcode_macro PRINT_START]
description: "Relay: PRINT_START -> PRINT_LAUNCHER (with param forwarding + defaults)"
gcode:
  {% set e     = params.EXTRUDER_TEMP     | default(230)   | int %}
  {% set b     = params.BED_TEMP          | default(60)    | int %}
  {% set xmin  = params.X_MIN             | default(-120)  | float %}
  {% set xmax  = params.X_MAX             | default(120)   | float %}
  {% set ymin  = params.Y_MIN             | default(-120)  | float %}
  {% set ymax  = params.Y_MAX             | default(120)   | float %}
  {% set fls   = params.FIRST_LAYER_SPEED | default(50)    | int %}
  {% set flf   = params.FIRST_LAYER_FAN   | default(0)     | int %}
  {% set lh    = params.LAYER_H           | default(0.2)   | float %}
  {% set linew = params.LINE_WIDTH        | default(0.6)   | float %}
  {% set flow  = params.FLOW_MULT         | default(1.5)   | float %}
  PRINT_LAUNCHER EXTRUDER_TEMP={e} BED_TEMP={b} X_MIN={xmin} X_MAX={xmax} Y_MIN={ymin} Y_MAX={ymax} FIRST_LAYER_SPEED={fls} FIRST_LAYER_FAN={flf} LAYER_H={lh} LINE_WIDTH={linew} FLOW_MULT={flow}

[gcode_macro END_PRINT]
description: "Relay: END_PRINT -> PRINT_END"
gcode:
  PRINT_END

[gcode_macro PRINT_END_SHIM]
description: "Relay: PRINT_END_SHIM -> PRINT_END"
gcode:
  PRINT_END

[gcode_macro STATUS_FLS]
gcode:
  {% set ctl = printer["gcode_macro GOV_FLS_CTL"] %}
  {% set rz  = ctl.release_z|float %}
  {% set cz  = printer.toolhead.position.z|float %}
  RESPOND MSG="FLS: armed={ctl.armed|int} purge_done={ctl.purge_done|int} Z={cz|round(3)} release_z={rz}"

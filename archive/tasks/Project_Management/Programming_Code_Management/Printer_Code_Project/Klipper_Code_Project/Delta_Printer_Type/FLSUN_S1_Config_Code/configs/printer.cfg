# ===== SAFE MODE HEADER =====
# This file has been safety-normalized for cross-printer compatibility.
# - ASCII only (no emojis, smart quotes, special glyphs)
# - One Jinja control tag per line (no {% ... %}{% ... %} on same line)
# - No backslash line continuations inside gcode: blocks
# - Do not embed {{ }} inside quoted RESPOND MSG strings
# Logic and macro names are unchanged.
# ==============================================
# S1 
[include macros.cfg]
[include oldstock.cfg]
[exclude_object]
[rotate_logger]
[gcode_arcs]
[display_status]
[respond]

[fan_generic box_fan]
pin: PB4

[force_move]
enable_force_move: True


[gcode_button motor_a]
pin: PD14
press_gcode: 
release_gcode:


[gcode_button motor_b]
pin: PD8
press_gcode: 
release_gcode:


[gcode_button motor_c]
pin: PB1
press_gcode: 
release_gcode:

[output_pin motor_cali_a]
pin: PD13
pwm: False
value: 0


[output_pin motor_cali_b]
pin: PE15
pwm: False
value: 0


[output_pin motor_cali_c]
pin: PB0
pwm: False
value: 0

[output_pin drying_box_heater]
pin: PA9
pwm: True
value: 0

[fan_generic drying_box_fan]
pin: PA8

####################################################################################################
#motor part
####################################################################################################
[stepper_a]
step_pin: PD6
dir_pin: !PD11  # motor direction pin,"!PE2" and "PE2" represent different directions
enable_pin: !PD10
microsteps: 16 
rotation_distance: 60 #rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>, 
endstop_pin: ^PD9
#position_endstop: 435 # printer printable height
#arm_length = 385 
homing_speed: 50
homing_retract_dist: 3

[stepper_b]
step_pin: PD15
dir_pin: !PE9  # motor direction pin
enable_pin: !PE8
microsteps: 16
rotation_distance: 60
endstop_pin: ^PE7
#position_endstop: 435
#arm_length = 385

[stepper_c]
step_pin: PE3
dir_pin: !PC5  # motor direction pin
enable_pin: !PA4
microsteps: 16
rotation_distance: 60
endstop_pin: ^PA3
#position_endstop: 435
#arm_length = 385

[extruder]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE4
microsteps: 16
rotation_distance: 4.5
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB8
sensor_type: RT 100K 3950
pullup_resistor: 510
sensor_pin: PC2
min_temp: -10 # extruder min temp
max_temp: 370 # extruder max temp
max_extrude_cross_section: 50 # default 0.640
max_extrude_only_distance: 500
pressure_advance: 0.015
self_adaption_pressure_advance: on # 'on' represents 'turning the self-adaption pressure advance on'. 'off' represents 'turning the self-adaption pressure advance off'.
#pressure_advance: 0.041
control:pid
pid_Kp: 24.261
pid_Ki: 1.304
pid_Kd: 112.813

[tmc5160 extruder]
cs_pin:PD7
spi_speed:500000
spi_software_sclk_pin:PA6
spi_software_mosi_pin:PA5
spi_software_miso_pin:PC4
sense_resistor: 0.0375
run_current:1.2
hold_current:0.300
stealthchop_threshold: 0

####################################################################################################
#mcu ,pin
####################################################################################################
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[heater_fan motherboard_fan]
pin: PB5
heater_temp:50.0

[fan]
pin: PC7
cycle_time: 0.0001
max_power: 0.55

[heater_fan heat_sink_fan] 
pin: PA2
heater_temp: 50.0
shutdown_speed: 0

[heater_bed]
heater_pin: PD5
sensor_pin: PC1
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140 #hotbed max temp
control:pid
pid_Kp: 42.423
pid_Ki: 1.911
pid_Kd: 235.447

[heater_generic HotBed1]
heater_pin: PB3
sensor_pin: PC0
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140
control: pid
pid_Kp: 18.240
pid_Ki: 0.558
pid_Kd: 149.109
gcode_id: HB1


[temperature_sensor Armv7 mcu] #the temp of pad
sensor_type: temperature_host
min_temp: -50
max_temp: 100

[temperature_sensor mcu_temp] #the temp of mcu
sensor_type: temperature_mcu
min_temp: -50
max_temp: 100

[input_shaper]
#shaper_freq_x: 41.4   # frequency for the X mark of the test model
#shaper_freq_y: 44.4  # frequency for the Y mark of the test model

[printer]
kinematics: delta
max_velocity: 3000 
max_accel: 40000 
max_accel_to_decel: 6000  
square_corner_velocity: 5 
max_z_velocity: 3000
#delta_radius: 183.3 # delta radius,default is 183.3
print_radius: 165 
minimum_z_position:-5 # min z position nozzle won't go to the position which Z lower the vaule
x_size_offset: 0   #adjust X size accuracy
y_size_offset: 0   #adjust Y size accuracy

################################################################################################################
#calibrate and bed_mesh
################################################################################################################
[delta_calibrate]
radius: 145
horizontal_move_z: 10 #This value is related to the lift height of the nozzle during delta_calibrate
Speed: 100

[probe]  
pin: !PD4
x_offset: 0 
y_offset: 0 
#z_offset: -0.25 #the distance between nozzle and level switch
speed: 10
samples: 2 #probe one point three times get an average
samples_result: average  
sample_retract_dist: 5
samples_tolerance: 0.25 # precision
samples_tolerance_retries: 5 

[bed_mesh]
mesh_radius: 140
mesh_origin: 0, 0
mesh_pps: 7, 7
fade_start: 1.0
fade_end: 10.0
fade_target: 0.0
algorithm: bicubic


#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro bed_level_1]
gcode:
    SET_GCODE_OFFSET Z=0
    M117  BED LEVEL START
    G28
    M204 S200
    M104 S140
    M140 S60
    {% if printer.extruder.temperature < 140 or printer.extruder.temperature > 150 %}
      M109 S140
    {% endif %}
  {% if printer.heater_bed.temperature < 55 or printer.heater_bed.temperature > 70 %}
      M190 S60
    {% endif %}
    M117  Level heating completed

    {% if printer.configfile.config["stepper_z"]["position_min"] == "-2.0" %}
      delta_calibrate
    {% else %}
      M117 WARN Skipping delta_calibrate - not a delta printer
    {% endif %}

    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level_state V=True
    save_config

[gcode_macro bed_level_2]
gcode:
    G28
    M204 S200
    M104 S140
    M140 S60
    {% if printer.extruder.temperature < 140 or printer.extruder.temperature > 150 %}
      M109 S140
    {% endif %}
  {% if printer.heater_bed.temperature < 55 or printer.heater_bed.temperature > 70 %}
      M190 S60
    {% endif %}
    G1 X0 Y0 Z50 F4200
    bed_mesh_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level2_state V=True
    save_config

[gcode_macro TMC]
gcode:
    DUMP_TMC STEPPER=extruder

[gcode_macro save_time]
gcode:
    {% set print_time = printer.save_variables.variables.total_time|default(0) %}
  {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% set offsets = printer.save_variables.variables.gcode_offsets|default({'x': None,'y': None,'z': None}) %}
  {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
  {% if 'X' in params %}
  {% set null = ns.offsets.update({'x': params.X}) %}
  {% endif %}
  {% if 'Y' in params %}
  {% set null = ns.offsets.update({'y': params.Y}) %}
  {% endif %}
  {% if 'Z' in params %}
  {% set null = ns.offsets.update({'z': params.Z}) %}
  {% endif %}
  {% if 'Z_ADJUST' in params %}
  {% if ns.offsets.z == None %}
  {% set null = ns.offsets.update({'z': 0}) %}
  {% endif %}
  {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  {% if (ns.offsets.z | float) <= 0.1000001 and (ns.offsets.z | float) >= -0.1000001 %}
      _SET_GCODE_OFFSET {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
      SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"
    {% endif %}

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 3
gcode:
    {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% if offsets %}
      _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offset %}{ "%s=%s " % (axis, offset) }{% endfor %}
      { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}
  {% if printer.save_temp_variables.variables.level_state %}
      F104 K=level_state V=False
      bed_level_2
    {% endif %}
  {% if printer.save_temp_variables.variables.level2_state %}
      F104 K=level2_state V=False
      M117  Bed level done
    {% endif %}
  {% if printer.save_temp_variables.variables.resonances_state %}
      F104 K=resonances_state V=False
      G28
      M117  Resonance measurement done
    {% endif %}
  {% if printer.save_variables.variables.was_interrupted %}
      M117 WARN Power loss occurred
    {% endif %}
    SAVE_VARIABLE VARIABLE=plr_flag VALUE=False

[delayed_gcode LOAD_FUNCTION_SWITCH_DELAY]
initial_duration: 1
gcode:  
    LOAD_FUNCTION_SWITCH
[output_pin relay_pin]
pin: PE1
pwm: False
value: 0

[gcode_macro relay_on]
gcode:
    SET_PIN PIN=relay_pin VALUE=1

[gcode_macro relay_off]
gcode:
    SET_STEPPER_ENABLE_CUSTOM STEPPER=extruder ENABLE=0
    SET_PIN PIN=relay_pin VALUE=0

[output_pin box_led]
pin: PC6
pwm: True
value: 1
cycle_time: 0.0010

[gcode_macro box_led_on]
gcode:
    SET_PIN PIN=box_led VALUE=1

[gcode_macro box_led_off]
gcode:
    SET_PIN PIN=box_led VALUE=0

[output_pin laser]
pin: PA1
pwm: False
value: 0

[gcode_macro laser_on]
gcode:
    SET_PIN PIN=laser VALUE=1

[gcode_macro laser_off]
gcode:
    SET_PIN PIN=laser VALUE=0

[output_pin LED_WHITE]
pin: PA12
pwm: True
value: 1
cycle_time: 0.010

[output_pin LED_ORANGE]
pin: PD1
pwm: True
value: 0
cycle_time: 0.010

[output_pin LED_RED]
pin: PD0
pwm: True
value: 0
cycle_time: 0.010

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
    {% if printer.print_stats.state != "paused" %}
  {% if 'heaters' in printer %}
        TURN_OFF_HEATERS
      {% endif %}
  {% endif %}
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]
# ===========================
# Robust Pause / Resume / Cancel
# ===========================

[gcode_macro PAUSE]
description: "Governance pause: lift, get OFF the part, park at front corner (delta-safe)"
rename_existing: PAUSE_BASE
gcode:
  RESPOND MSG="GOV: PAUSE requested"

  {% if printer["gcode_macro FUI_STOP"] is defined %} FUI_STOP {% endif %}

  # temp-gated retract
  {% set t_now = printer.extruder.temperature|float %}
  {% set t_min = printer.configfile.settings.extruder.min_extrude_temp|float %}
  SAVE_GCODE_STATE NAME=GOV_PAUSE_STATE
  G91
  {% if t_now >= t_min %} G1 E-2.0 F1200 {% endif %}
  G1 Z+8 F1200
  G90

  # delta geometry
  {% set rx = printer.toolhead.axis_maximum.x|float %}
  {% set ry = printer.toolhead.axis_maximum.y|float %}
  {% set r  = rx if rx < ry else ry %}
  {% set clip = r - 10.0 %}

  # saved bounds (if present)
  {% set xmin_sv = printer.save_variables.variables.gov_last_mesh_xmin|default(none) %}
  {% set xmax_sv = printer.save_variables.variables.gov_last_mesh_xmax|default(none) %}
  {% set ymin_sv = printer.save_variables.variables.gov_last_mesh_ymin|default(none) %}
  {% set ymax_sv = printer.save_variables.variables.gov_last_mesh_ymax|default(none) %}
  {% set has_bounds = (xmin_sv is not none) and (xmax_sv is not none) and (ymin_sv is not none) and (ymax_sv is not none) %}

  {% set cx = printer.gcode_move.position.x|float %}
  {% set cy = printer.gcode_move.position.y|float %}

  {% if has_bounds %}
    {% set xmin = xmin_sv|float %}
    {% set xmax = xmax_sv|float %}
    {% set ymin = ymin_sv|float %}
    {% set ymax = ymax_sv|float %}
    {% set x_mid = (xmin + xmax)/2.0 %}
    {% set margin_front = 20.0 %}
    {% set margin_side  = 25.0 %}

    {% if cx >= x_mid %}
      {% set x_park = xmin - margin_side %}   # go to front-left
    {% else %}
      {% set x_park = xmax + margin_side %}   # go to front-right
    {% endif %}
    {% set y_park = ymin - margin_front %}
  {% else %}
    {% set x_park = 0.0 %}
    {% set y_park = (-clip + 15.0) %}
  {% endif %}

  # per-axis clamp first
  {% if x_park < -clip %}{% set x_park = -clip %}{% endif %}
  {% if x_park >  clip %}{% set x_park =  clip %}{% endif %}
  {% if y_park < -clip %}{% set y_park = -clip %}{% endif %}
  {% if y_park >  clip %}{% set y_park =  clip %}{% endif %}

  # radial clamp (scale vector to circle if needed)
  {% set r_now = (x_park*x_park + y_park*y_park)**0.5 %}
  {% if r_now > clip %}
    {% set scale = (clip / r_now) %}
    {% set x_park = x_park * scale %}
    {% set y_park = y_park * scale %}
  {% endif %}

  # choose a safer Z for deltas before big XY (avoid reach errors)
  {% set z_now = printer.gcode_move.position.z|float %}
  {% set z_max = printer.toolhead.axis_maximum.z|float %}
  {% set z_target = z_now + 10.0 %}
  {% if z_target < 20.0 %}{% set z_target = 20.0 %}{% endif %}
  {% if z_target > (z_max - 5.0) %}{% set z_target = z_max - 5.0 %}{% endif %}

  G1 Z{z_target|round(2)} F6000
  G1 X{x_park|round(2)} Y{y_park|round(2)} F9000

  {% if has_bounds %}
    RESPOND MSG="GOV: Paused at service park (bounds) X={x_park|round(1)} Y={y_park|round(1)} Z={z_target|round(1)}"
  {% else %}
    RESPOND MSG="GOV: Paused at service park (fallback) X={x_park|round(1)} Y={y_park|round(1)} Z={z_target|round(1)}"
  {% endif %}

  PAUSE_BASE

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  RESPOND MSG="GOV: RESUME"

  # Optional safe reprime if hot
  {% set t = printer.extruder.temperature|float %}
  {% set min_t = printer.configfile.settings.extruder.min_extrude_temp|float %}
  {% if t >= min_t %}
    G91
    G1 E1.0 F300
    G90
  {% else %}
    RESPOND MSG="GOV: Skipping reprime (extruder below safe temp)"
  {% endif %}

  # Return to saved position and resume queue
  RESTORE_GCODE_STATE NAME=GOV_PAUSE_STATE MOVE=1
  #FUI_HARD_RESET
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="GOV: CANCEL_PRINT"

  # Lift and depressurize if hot
  {% set t = printer.extruder.temperature|float %}
  {% set min_t = printer.configfile.settings.extruder.min_extrude_temp|float %}
  G91
  {% if t >= min_t %}
    G1 E-3.0 F1200
  {% else %}
    RESPOND MSG="GOV: Skipping retract on cancel (extruder below safe temp)"
  {% endif %}
  G1 Z+10 F1200
  G90

  # Park at center, then home (delta-safe)
  G1 X0 Y0 F9000
  G28

  # Heaters & fans off
  M106 S0
  TURN_OFF_HEATERS

  # Clear paused state if any
  {% if printer.pause_resume.is_paused %}
    CLEAR_PAUSE
  {% endif %}
  #FUI_HARD_RESET
  # Disable all motors to eliminate coil whine
  M84

  CANCEL_PRINT_BASE
  
[gcode_macro CANCEL]
description: "Alias to CANCEL_PRINT"
gcode:
  CANCEL_PRINT

[gcode_macro STOP_PRINT]
description: "Alias to CANCEL_PRINT"
gcode:
  CANCEL_PRINT

[gcode_macro PRINT_CANCEL]
description: "Alias to CANCEL_PRINT"
gcode:
  CANCEL_PRINT

[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after a further 'd' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
variable_start: 0
gcode:
    {% if printer["gcode_macro PAUSE_AFTER_D"].start == 0%}
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
      {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
      SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
      M117 Pause at {d_end|round(2)}
      SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=1
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second
    {% endif %}

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    {% if printer["gcode_macro PAUSE_AFTER_D"].start == 0 %}
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 
    {% else %}
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
      {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
        M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
      {% else %}
        PAUSE
        M117 Filament Runout Detected!
        # screen_led_on R=0 O=1 W=0
        SCREEN_LED_ON R=0 O=0 W=1 #20240814 Temporary change
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
        SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=start VALUE=0
      {% endif %}
  {% endif %}

##################################################
# Filament / Color Change
##################################################

[gcode_macro M600]
description: Filament Change
gcode:
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-140) %}
  {% set z = params.Z|default(10)|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
    {% set z_safe = lift_z %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600_state VALUE=1
  {% set nozzle_temp = printer.extruder.target|float %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=nozzle_temp VALUE={nozzle_temp}
  {% set fan_speed = printer.fan.speed|float %}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan_speed VALUE={fan_speed}
  RESPOND MSG="Print paused for filament change!"
  _SCREEN_LED_ON R=1 O=0 W=0
  PAUSE_BASE
  G91
  {% if nozzle_temp >= 180 %}
    G1 E-1 F2100
  {% else %}
    RESPOND TYPE=error MSG="Extruder not hot enought!"
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000
  {% else %}
    RESPOND TYPE=error MSG="Printer not homed!"
  {% endif %}
  M107
  SET_FAN_SPEED FAN=chamber_fan SPEED=0
  RESPOND MSG="Load new filament before resume!"
  SET_IDLE_TIMEOUT TIMEOUT=900
  RESPOND TYPE=command MSG="action:prompt_begin Filament change detected!"
  RESPOND TYPE=command MSG="action:prompt_text Load new filament before resume!"
  RESPOND TYPE=command MSG="action:prompt_button Resume|M601"
  RESPOND TYPE=command MSG="action:prompt_end"
  
######################################################################
#filament sensor
######################################################################
[filament_switch_sensor power_loss]  
pause_on_runout: False
switch_pin: PD3
event_delay: 0.01
pause_delay: 0.01
insert_gcode:
    {% if printer.print_stats.state == "printing" %}
      SAVE_POWER_LOSS_PARAMS
      SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
      STEPPER_STOP
      SHUTDOWN
      G4 P5000
    {% endif %} 
on_disable_gcode:
    {% if printer.print_stats.state == "printing" %}
      STEPPER_STOP
      SHUTDOWN
      G4 P5000
    {% endif %}

[filament_switch_sensor filament_sensor]
switch_pin: PA11
pause_on_runout: False
runout_gcode: GOV_RUNOUT_HANDLER
insert_gcode:
  RESPOND MSG="Filament inserted"

[filament_motion_sensor my_sensor] #堵料检测
detection_length: 18.0 #这个耗材距离之内，开关状态没有发生变化，即触发
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
switch_pin: PA10
#insert_gcode: RESUME
pause_on_runout: False # This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below. 
#event_delay: 20.0
#pause_delay: 5.0
runout_gcode:
	{% if printer.print_stats.state == "printing" %}
		{% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
			PAUSE
			screen_led_on R=0 O=1 W=0
			M117 Filament Clog Detected!
		{% else %}
		    PAUSE
			#PAUSE_AFTER_D D=500
			M117 Filament Runout Detected!
		{% endif %}
	{% endif %}

[gcode_macro _PAUSE_AFTER_D]
description: Pause printing after a certain length of extruded filament
variable_end_d: 0
variable_was_paused: 0
gcode:
  {% set d_start = printer.print_stats.filament_used|float %}
  {% set d_end = (d_start + params.D|float)|float %}
  SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=end_d VALUE={d_end}
  RESPOND MSG="Pause will be done when {d_end|round(2)}mm of filament have been extruded."
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1

[delayed_gcode PAUSE_AT_D]
initial_duration: 0
gcode:
  {% if printer.print_stats.state == "printing" %}
    {% set was_paused = printer["gcode_macro _PAUSE_AFTER_DISTANCE"].was_paused %}
    {% if was_paused %}
      {% if printer["filament_switch_sensor _filament_sensor"].filament_detected %}
        RESPOND MSG="Filament replaced! Pause canceled."
        SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
      {% else %}
        RESPOND MSG="Filament not replaced... Pause will be done."
        SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
      {% endif %}
    {% else %}
      {% set d_current = printer.print_stats.filament_used|float %}
      {% if d_current < printer["gcode_macro _PAUSE_AFTER_DISTANCE"].end_d %}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
      {% else %}
        UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
        M600
      {% endif %}
    {% endif %}
  {% else %}
    {% if printer.print_stats.state == "paused" %}
      SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=1
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=1
    {% else %}
      RESPOND MSG="Filament not replaced... Pause canceled because print was stopped."
      SET_GCODE_VARIABLE MACRO=_PAUSE_AFTER_DISTANCE VARIABLE=was_paused value=0
      UPDATE_DELAYED_GCODE ID=PAUSE_AT_DISTANCE DURATION=0
    {% endif %}
  {% endif %}
  
[gcode_macro GOV_RUNOUT_HANDLER]
description: "Runout: lift, get off the part, park at front-access spot, then PAUSE (delta-safe)"
gcode:
  RESPOND MSG="GOV: Filament event"

  # Gate retract by temp to avoid 'extrude below min temp'
  {% set t_now = printer.extruder.temperature|float %}
  {% set t_min = printer.configfile.settings.extruder.min_extrude_temp|float %}

  SAVE_GCODE_STATE NAME=GOV_RUNOUT_STATE
  G91
  {% if t_now >= t_min %}
    G1 E-2.0 F1200
  {% endif %}
  G1 Z+8 F1200
  G90

  # Compute a safe service point (front-access). Use saved bounds if available, else front-center fallback.
  {% set rx = printer.toolhead.axis_maximum.x|float %}
  {% set ry = printer.toolhead.axis_maximum.y|float %}
  {% set r  = rx if rx < ry else ry %}
  {% set clip = r - 10.0 %}

  {% set xmin_sv = printer.save_variables.variables.gov_last_mesh_xmin|default(none) %}
  {% set xmax_sv = printer.save_variables.variables.gov_last_mesh_xmax|default(none) %}
  {% set ymin_sv = printer.save_variables.variables.gov_last_mesh_ymin|default(none) %}
  {% set ymax_sv = printer.save_variables.variables.gov_last_mesh_ymax|default(none) %}

  {% if (xmin_sv is not none) and (xmax_sv is not none) and (ymin_sv is not none) and (ymax_sv is not none) %}
    {% set xmin = xmin_sv|float %}
    {% set xmax = xmax_sv|float %}
    {% set ymin = ymin_sv|float %}
    {% set ymax = ymax_sv|float %}
    {% set margin = 15.0 %}
    {% set x_mid  = (xmin + xmax)/2.0 %}
    {% set x_park = x_mid - 20.0 %}
    {% set y_park = ymin + margin %}
  {% else %}
    {% set x_park = 0.0 %}
    {% set y_park = (-clip + 15.0) %}
  {% endif %}

  # Clamp into reachable circle (delta)
  {% if x_park < -clip %}{% set x_park = -clip %}{% endif %}
  {% if x_park >  clip %}{% set x_park =  clip %}{% endif %}
  {% if y_park < -clip %}{% set y_park = -clip %}{% endif %}
  {% if y_park >  clip %}{% set y_park =  clip %}{% endif %}

  # Small Z safety + travel to park
  {% set z_now = printer.gcode_move.position.z|float %}
  {% set z_max = printer.toolhead.axis_maximum.z|float %}
  {% set z_target = z_now + 2.0 %}
  {% if z_target > (z_max - 5.0) %}{% set z_target = z_max - 5.0 %}{% endif %}

  G1 Z{ z_target|round(2) } F6000
  G1 X{ x_park|round(2) } Y{ y_park|round(2) } F9000

  # Optional: start your service heartbeat if present (no-op if missing)
  {% if printer["gcode_macro FUI_START"] is defined %}
  SET_GCODE_VARIABLE MACRO=GOV_FUI_GUARD VARIABLE=fu_allowed VALUE=1
  FUI_START

  {% endif %}

  # Finally PAUSE here, so the head is NOT sitting on the part
  PAUSE

[gcode_macro GOV_RUNOUT_RESUME]
description: "Stop UI loop and resume print after runout"
gcode:
  FUI_STOP
  #FUI_HARD_RESET
  RESUME

[gcode_macro GOV_FUI_GUARD]
variable_fu_allowed: 0
gcode:

[gcode_macro FUI_START]
description: "Start filament UI (quiet)"
gcode:
  SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_state VALUE=1
  SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_ticks VALUE=0
  RESPOND MSG="GOV: FILAMENT_UI start"
  UPDATE_DELAYED_GCODE ID=GOV_FUI_LOOP DURATION={ printer["gcode_macro GOV_FILAMENT_UI"].fu_period|int }

[gcode_macro FUI_STOP]
description: "Stop filament UI (quiet)"
gcode:
  SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_state VALUE=0
  SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_ticks VALUE=0
  UPDATE_DELAYED_GCODE ID=GOV_FUI_LOOP DURATION=0
  RESPOND MSG="GOV: FILAMENT_UI done"

[gcode_macro GOV_FILAMENT_UI]
description: "Filament UI state (quiet)"
variable_fu_state: 0
variable_fu_ticks: 0
variable_fu_period: 1
variable_fu_max_ticks: 60
gcode:

[delayed_gcode GOV_FUI_LOOP]
gcode:
  {% set st = printer["gcode_macro GOV_FILAMENT_UI"].fu_state|int %}
  {% if st == 0 %}
    UPDATE_DELAYED_GCODE ID=GOV_FUI_LOOP DURATION=0
  {% else %}
    {% set t  = printer["gcode_macro GOV_FILAMENT_UI"].fu_ticks|int %}
    {% set per = printer["gcode_macro GOV_FILAMENT_UI"].fu_period|int %}
    {% set max = printer["gcode_macro GOV_FILAMENT_UI"].fu_max_ticks|int %}
    {% set t_next = t + 1 %}
    SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_ticks VALUE={t_next}
    {% if t_next >= max %}
      RESPOND MSG="GOV: FILAMENT_UI timeout"
      SET_GCODE_VARIABLE MACRO=GOV_FILAMENT_UI VARIABLE=fu_state VALUE=0
      UPDATE_DELAYED_GCODE ID=GOV_FUI_LOOP DURATION=0
    {% else %}
      UPDATE_DELAYED_GCODE ID=GOV_FUI_LOOP DURATION={per}
    {% endif %}
  {% endif %}

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
	M117 unload_filament heating completed!
    G91
    G1 E-50 F300
    G90
	SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    M117 unload_filament done!
	
[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    {% if printer.extruder.temperature < 235 %}
      M109 S240
    {% endif %}
    M104 S240
	M117 load_filament heating completed!
	G91
    G1 E40 F800
    G1 E30 F300
    G90
	SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	M117 load_filament done!


###########################################################################################################################
#
###########################################################################################################################

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode:
    M106 S0
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_FAN_SPEED FAN=drying_box_fan SPEED=0

[save_variables]
filename: ~/savedVariables1.cfg
tempfile: ~/temp/savedVariables1.cfg

[save_temp_variables]
filename: ~/temp/tempVariables.cfg

[resonance_tester]
probe_points:0, 0, 20
accel_chip: adxl345
min_freq: 20
max_freq: 80
accel_per_hz: 300

[adxl345]
cs_pin:PE13
spi_speed: 100000
spi_software_sclk_pin:PE10
spi_software_mosi_pin:PE11
spi_software_miso_pin:PE12
rate:3200

###########################################################################################################################
# M106
###########################################################################################################################
[gcode_macro M106]
rename_existing: M106.1
gcode:
  {% set slow_n = printer["gcode_macro GOV_PHASE"].slow_layers|int %}
  {% set L = printer["gcode_macro GOV_PHASE"].layer|int %}
  {% if L < slow_n %}
    #RESPOND MSG="GOV: fan request suppressed (layer={L} < {slow_n})"
    M107
  {% else %}
    M106.1 {rawparams}
  {% endif %}

[gcode_macro SET_FAN_SPEED]
rename_existing: SET_FAN_SPEED_BASE
gcode:
  {% set slow_n = printer["gcode_macro GOV_PHASE"].slow_layers|int %}
  {% set L = printer["gcode_macro GOV_PHASE"].layer|int %}
  {% set fan_name = params.FAN|default("fan") %}
  {% if fan_name == "fan" and L < slow_n %}
    RESPOND MSG="GOV: SET_FAN_SPEED {fan_name} suppressed (layer={L} < {slow_n})"
    SET_FAN_SPEED_BASE FAN={fan_name} SPEED=0
  {% else %}
    SET_FAN_SPEED_BASE {rawparams}
  {% endif %}

#[include ADXL345.cfg] # load ADXL345 module ,Uncomment it before using ADXL345

# EXP1 / EXP2 (display) pins
#[board_pins]
#aliases:
    # EXP1 header
#    EXP1_1=PC1, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,
#    EXP1_2=PC3, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,
    # EXP2 header
#    EXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,
#    EXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>

##################################################################################################
############################################################################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [printer]
#*# delta_radius = 182.262847
#*#
#*# [stepper_a]
#*# angle = 209.682986
#*# arm_length = 385.000000
#*# position_endstop = 431.203541
#*#
#*# [stepper_b]
#*# angle = 329.304856
#*# arm_length = 385.000000
#*# position_endstop = 430.996534
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 385.000000
#*# position_endstop = 429.872521
#*#
#*# [delta_calibrate]
#*# height0 = 0.0
#*# height0_pos = 22970.000,22970.000,22970.000
#*# height1 = 0.0
#*# height1_pos = 26859.000,26859.000,20621.000
#*# height2 = 0.0
#*# height2_pos = 22433.000,29128.000,22433.000
#*# height3 = 0.0
#*# height3_pos = 20775.500,26273.500,26273.500
#*# height4 = 0.0
#*# height4_pos = 22354.500,22354.500,27237.000
#*# height5 = 0.0
#*# height5_pos = 25697.500,20905.500,25697.500
#*# height6 = 0.0
#*# height6_pos = 28127.500,22381.500,22381.500
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.153406, 0.153406, 0.138543, 0.285366, 0.356255, 0.360256, 0.360256
#*# 	  0.173539, 0.221358, 0.401058, 0.211434, 0.284765, 0.346097, 0.347670
#*# 	  0.084503, 0.258488, 0.316615, 0.251293, 0.257949, 0.246282, 0.273579
#*# 	  0.250573, 0.271153, 0.247651, 0.234865, 0.202396, 0.350134, 0.225128
#*# 	  0.216446, 0.281278, 0.292297, 0.258365, 0.266267, 0.235697, 0.167778
#*# 	  0.199861, 0.263506, 0.355046, 0.255815, 0.300900, 0.335612, 0.332030
#*# 	  0.269699, 0.269699, 0.183009, 0.200229, 0.323144, 0.326922, 0.326922
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = -156.0
#*# max_x = 156.0
#*# min_y = -156.0
#*# max_y = 156.0
#*#
#*# [probe]
#*# z_offset = -0.044
#*#
#*# [bed_mesh governance]
#*# version = 1
#*# points =
#*# 	  0.153406, 0.153406, 0.138543, 0.285366, 0.356255, 0.360256, 0.360256
#*# 	  0.173539, 0.221358, 0.401058, 0.211434, 0.284765, 0.346097, 0.347670
#*# 	  0.084503, 0.258488, 0.316615, 0.251293, 0.257949, 0.246282, 0.273579
#*# 	  0.250573, 0.271153, 0.247651, 0.234865, 0.202396, 0.350134, 0.225128
#*# 	  0.216446, 0.281278, 0.292297, 0.258365, 0.266267, 0.235697, 0.167778
#*# 	  0.199861, 0.263506, 0.355046, 0.255815, 0.300900, 0.335612, 0.332030
#*# 	  0.269699, 0.269699, 0.183009, 0.200229, 0.323144, 0.326922, 0.326922
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = -156.0
#*# max_x = 156.0
#*# min_y = -156.0
#*# max_y = 156.0